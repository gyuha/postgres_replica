
version: '3'

# .env 파일에서 환경 변수 로드
dotenv: ['.env']


vars:
  VOLUME_DIR: data
  RM_CMD:
    sh: |
      case "{{OS}}" in
        windows)
          echo "powershell -Command Remove-Item -Force -Recurse -ErrorAction SilentlyContinue -Path"
          ;;
        *)
          echo "rm -rf"
          ;;
      esac
  MKDIR_CMD:
    sh: |
      case "{{OS}}" in
        windows)
          echo "powershell -Command New-Item -ItemType Directory -Force -Path"
          ;;
        *)
          echo "mkdir -p"
          ;;
      esac
  CHMOD_CMD:
    sh: |
      case "{{OS}}" in
        windows)
          echo "echo Skipping chmod on Windows..."
          ;;
        *)
          echo "chmod +x scripts/*.sh"
          ;;
      esac

tasks:
  up:
    desc: PostgreSQL 클러스터 시작
    cmds:
      - '{{.CHMOD_CMD}}'
      - docker compose down -v
      - docker compose up -d
      - task: wait-for-db

  start:
    desc: PostgreSQL 클러스터 시작 (alias up)
    cmds:
      - task: up

  down:
    desc: PostgreSQL 클러스터 중단
    cmds:
      - docker compose down -v
  
  stop:
    desc: PostgreSQL 클러스터 중단 (alias down)
    cmds:
      - task: down

  clean:
    desc: 데이터 폴더 삭제
    cmds:
      - task: down
      - '{{.RM_CMD}} "{{.VOLUME_DIR}}"'

  wait-for-db:
    desc: DB 연결 대기
    internal: true
    cmds:
      - |
        echo "Waiting for Primary DB..."
        for i in {1..30}; do
          if docker exec pg1 pg_isready -U postgres > /dev/null 2>&1; then
            echo "Primary DB is ready!"
            break
          fi
          echo "Waiting... ($i/30)"
          sleep 1
        done
      - |
        echo "Waiting for Replica DB..."
        for i in {1..30}; do
          if docker exec pg2 pg_isready -U postgres > /dev/null 2>&1; then
            echo "Replica DB is ready!"
            break
          fi
          echo "Waiting... ($i/30)"
          sleep 1
        done

  test-connection:
    desc: DB 연결 테스트
    cmds:
      - echo "Testing Primary connection..."
      - docker compose exec primary psql -U postgres -c "\l"
      - echo "Testing Replica connection..."
      - docker compose exec replica psql -U postgres -c "\l"

  logs:
    desc: 특정 서비스의 로그를 출력 - 사용법 / task logs -- [서비스명]
    cmds:
      - cmd: |
          SERVICE="{{.CLI_ARGS}}"
          if [ -z "$SERVICE" ]; then
            echo "모든 서비스의 로그를 출력합니다..."
            docker compose logs -f
          else
            echo "$SERVICE 서비스의 로그를 출력합니다..."
            docker compose logs -f {{.CLI_ARGS}}
          fi
  
  sh:
    desc: 특정 서비스의 쉘 접속 - 사용법 / task sh -- [서비스명]
    cmds:
      - cmd: |
          SERVICE="{{.CLI_ARGS}}"
          if [ -z "$SERVICE" ]; then
            echo "서비스명을 입력해주세요"
          else
            echo "$SERVICE 서비스의 쉘을 접속합니다..."
            docker compose exec -it {{.CLI_ARGS}} bash
          fi

  status:
    desc: PostgreSQL 클러스터 상태 확인
    cmds:
      - |
        echo "컨테이너 상태 확인:"
        docker ps --format "table {{.Names}}\t{{.Status}}"
        
        echo "\nPostgreSQL 상태 확인:"
        if docker exec pg1 pg_isready -U ${POSTGRESQL_USERNAME} 2>/dev/null; then
          echo "Primary (pg1): 정상"
        else
          echo "Primary (pg1): 비정상"
        fi
        
        if docker exec pg2 pg_isready -U ${POSTGRESQL_USERNAME} 2>/dev/null; then
          echo "Replica1 (pg2): 정상"
        else
          echo "Replica1 (pg2): 비정상"
        fi
        
        if docker exec pg3 pg_isready -U ${POSTGRESQL_USERNAME} 2>/dev/null; then
          echo "Replica2 (pg3): 정상"
        else
          echo "Replica2 (pg3): 비정상"
        fi


        echo "\n복제 상태 확인:"
        docker exec -it -e PGPASSWORD=${POSTGRESQL_PASSWORD} pg1 psql -U ${POSTGRESQL_USERNAME} -c "SELECT * FROM pg_stat_replication;" 2>/dev/null
        

  help:
    desc: Show this help
    cmds:
      - task --list

  default:
    desc: Show this help
    cmds:
      - task --list