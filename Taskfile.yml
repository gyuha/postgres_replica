version: '3'

vars:
  VOLUME_DIR: data
  RM_CMD:
    sh: |
      case "{{OS}}" in
        windows)
          echo "powershell -Command Remove-Item -Force -Recurse -ErrorAction SilentlyContinue -Path"
          ;;
        *)
          echo "rm -rf"
          ;;
      esac
  MKDIR_CMD:
    sh: |
      case "{{OS}}" in
        windows)
          echo "powershell -Command New-Item -ItemType Directory -Force -Path"
          ;;
        *)
          echo "mkdir -p"
          ;;
      esac
  CHMOD_CMD:
    sh: |
      case "{{OS}}" in
        windows)
          echo "echo Skipping chmod on Windows..."
          ;;
        *)
          echo "chmod +x scripts/*.sh"
          ;;
      esac

tasks:
  start:
    desc: PostgreSQL 클러스터 시작
    cmds:
      - '{{.MKDIR_CMD}} "{{.VOLUME_DIR}}/primary"'
      - '{{.MKDIR_CMD}} "{{.VOLUME_DIR}}/replica"'
      - '{{.CHMOD_CMD}}'
      - docker compose down -v
      - docker compose up -d
      - task: wait-for-db

  stop:
    desc: PostgreSQL 클러스터 중단
    cmds:
      - docker compose down

  clean:
    desc: 데이터 폴더 삭제
    cmds:
      - docker compose down -v
      - '{{.RM_CMD}} "{{.VOLUME_DIR}}"'

  wait-for-db:
    desc: DB 연결 대기
    internal: true
    cmds:
      - |
        echo "Waiting for Primary DB..."
        for i in {1..30}; do
          if docker exec postgres_primary pg_isready -U postgres > /dev/null 2>&1; then
            echo "Primary DB is ready!"
            break
          fi
          echo "Waiting... ($i/30)"
          sleep 1
        done
      - |
        echo "Waiting for Replica DB..."
        for i in {1..30}; do
          if docker exec postgres_replica pg_isready -U postgres > /dev/null 2>&1; then
            echo "Replica DB is ready!"
            break
          fi
          echo "Waiting... ($i/30)"
          sleep 1
        done

  test-connection:
    desc: DB 연결 테스트
    cmds:
      - echo "Testing Primary connection..."
      - docker compose exec primary psql -U postgres -c "\l"
      - echo "Testing Replica connection..."
      - docker compose exec replica psql -U postgres -c "\l"

  logs:
    desc: 모든 컨테이너 로그 출력
    cmds:
      - docker compose logs -f

  primary-logs:
    desc: Primary 노드 로그 출력
    cmds:
      - docker compose logs -f primary

  replica-logs:
    desc: Replica 노드 로그 출력
    cmds:
      - docker compose logs -f replica

  status:
    desc: Check replication status
    cmds:
      - echo "Primary Status:"
      - docker exec postgres_primary pg_isready
      - echo "Replica Status:"
      - docker exec postgres_replica pg_isready
      - echo "Replication Status:"
      - docker exec postgres_primary psql -U postgres -c "SELECT * FROM pg_stat_replication;"

  primary-sh:
    desc: Primary 노드 쉘 접속
    cmds:
      - docker compose exec primary bash

  replica-sh:
    desc: Replica 노드 쉘 접속
    cmds:
      - docker compose exec replica bash

  help:
    desc: Show this help
    cmds:
      - task --list

  default:
    desc: Show this help
    cmds:
      - task --list